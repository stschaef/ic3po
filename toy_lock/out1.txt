sat
(
  ;; universe for Epoch:
  ;;   Epoch!val!6 Epoch!val!0 Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!7 
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Epoch!val!6 () Epoch)
  (declare-fun Epoch!val!0 () Epoch)
  (declare-fun Epoch!val!1 () Epoch)
  (declare-fun Epoch!val!2 () Epoch)
  (declare-fun Epoch!val!3 () Epoch)
  (declare-fun Epoch!val!4 () Epoch)
  (declare-fun Epoch!val!5 () Epoch)
  (declare-fun Epoch!val!7 () Epoch)
  ;; cardinality constraint:
  (forall ((x Epoch))
          (or (= x Epoch!val!6)
              (= x Epoch!val!0)
              (= x Epoch!val!1)
              (= x Epoch!val!2)
              (= x Epoch!val!3)
              (= x Epoch!val!4)
              (= x Epoch!val!5)
              (= x Epoch!val!7)))
  ;; -----------
  (define-fun R1 () Bool
    true)
  (define-fun __R1 () Bool
    (forall ((n Node) (m Node))
  (let ((a!1 (not (and (or (= n Node1) (= n Node0))
                       (or (= m Node0) (= m Node1))))))
    (or a!1 (= n m)))))
  (define-fun I () Bool
    (exists ((first Node) (e Epoch))
  (let ((a!1 (ite (= first Node2)
                  Epoch!val!7
                  (ite (= first Node1)
                       Epoch!val!6
                       (ite (= first Node0) Epoch!val!5 Epoch!val!3))))
        (a!2 (forall ((e1 Epoch))
               (not (and (= e1 Epoch!val!6)
                         (not (= e1 Epoch!val!5))
                         (not (= e1 Epoch!val!7))
                         (not (= e1 Epoch!val!0))
                         (not (= e1 Epoch!val!4))
                         (not (= e1 Epoch!val!2))
                         (not (= e1 Epoch!val!3))
                         (= first Node0))))))
    (and (not (= e Epoch!val!4))
         (forall ((n Node)) (= n first))
         (= first Node1)
         (= a!1 e)
         a!2))))
  (define-fun __R2 () Bool
    true)
  (define-fun __R3 () Bool
    true)
  (define-fun __R4 () Bool
    (forall ((n Node))
  (let ((a!1 (not (and (= n Node0) (not (= n Node1)) (not (= n Node2)))))
        (a!2 (not (and (not (= n Node0)) (not (= n Node1)) (not (= n Node2))))))
  (let ((a!3 (not (and (= n Node1) (not (= n Node2)) a!1 a!2 (= n Node0)))))
    (or a!3 (= n Node0) (= n Node1))))))
  (define-fun P () Bool
    true)
  (define-fun R2 () Bool
    true)
  (define-fun zero () Epoch
    Epoch!val!4)
  (define-fun __R5 () Bool
    (let ((a!1 (forall ((n Node)) (not (or (= n Node0) (= n Node1))))))
  (not a!1)))
  (define-fun R7 () Bool
    true)
  (define-fun __R6 () Bool
    (forall ((n Node))
  (let ((a!1 (forall ((m Node))
               (let ((a!1 (and (not (or (= m Node0) (= m Node1)))
                               (not (= m Node2))
                               (= n Node2)))
                     (a!2 (and (or (= m Node0) (= m Node1))
                               (not (= m Node2))
                               (not (or (= n Node0) (= n Node1)))
                               (not (= n Node2))))
                     (a!3 (not (and (or (= m Node0) (= m Node1))
                                    (not (= m Node2))
                                    (or (= n Node0) (= n Node1))
                                    (not (= n Node2)))))
                     (a!4 (and (= m Node2)
                               (not (or (= n Node0) (= n Node1)))
                               (not (= n Node2))))
                     (a!5 (and (not (or (= m Node0) (= m Node1)))
                               (not (= m Node2))
                               (or (= n Node0) (= n Node1))
                               (not (= n Node2))))
                     (a!6 (not (and (or (= m Node0) (= m Node1))
                                    (not (= m Node2))
                                    (= n Node2))))
                     (a!7 (and (not (or (= n Node0) (= n Node1)))
                               (not (= n Node2))))
                     (a!9 (not (and (or (= m Node0) (= m Node1))
                                    (not (= m Node2)))))
                     (a!10 (and (not (or (= m Node0) (= m Node1)))
                                (not (= m Node2)))))
               (let ((a!8 (and (not (or (= m Node0) (= m Node1)))
                               (not (= m Node2))
                               (or (= n Node0) (= n Node1))
                               (not (= n Node2))
                               (not a!7)))
                     (a!11 (and a!9
                                (not a!10)
                                (not (= m Node2))
                                (not (or (= n Node0) (= n Node1)))
                                (not (= n Node2)))))
               (let ((a!12 (or (and (= m Node2)
                                    (or (= n Node0) (= n Node1))
                                    (not (= n Node2))
                                    (not a!7))
                               a!8
                               (and a!9
                                    (not a!10)
                                    (not (= m Node2))
                                    (or (= n Node0) (= n Node1))
                                    (not (= n Node2))
                                    (not a!7))
                               a!4
                               a!11
                               (and a!9
                                    (not a!10)
                                    (not (= m Node2))
                                    (= n Node2)))))
               (let ((a!13 (or (and (= m Node2)
                                    (or (= n Node0) (= n Node1))
                                    (not (= n Node2)))
                               (and (not a!2) a!3 (or a!4 a!5 (and a!6 a!12))))))
                 (or (= m n) (and (not a!1) a!13)))))))))
    (or (not (or (= n Node0) (= n Node1))) a!1))))
  (define-fun __P () Bool
    (forall ((n Node) (m Node) (e Epoch))
  (let ((a!1 (not (and (= e Epoch!val!6)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3))
                       (= n Node0)
                       (= m Node0)))))
    (or a!1 (= n m)))))
  (define-fun __R () Bool
    false)
  (define-fun R () Bool
    true)
  (define-fun T () Bool
    true)
  (define-fun R4 () Bool
    true)
  (define-fun R3 () Bool
    true)
  (define-fun R8 () Bool
    true)
  (define-fun __R7 () Bool
    (forall ((n Node) (e Epoch))
  (let ((a!1 (not (and (= e Epoch!val!6)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3))
                       (= n Node0))))
        (a!2 (and (not (or (= n Node0) (= n Node1)))
                  (not (= n Node2))
                  (= e Epoch!val!7)))
        (a!3 (not (and (or (= n Node0) (= n Node1))
                       (not (= n Node2))
                       (= e Epoch!val!5))))
        (a!4 (not (and (or (= n Node0) (= n Node1))
                       (not (= n Node2))
                       (= e Epoch!val!6))))
        (a!5 (and (not (or (= n Node0) (= n Node1)))
                  (not (= n Node2))
                  (= e Epoch!val!6)))
        (a!6 (not (and (or (= n Node0) (= n Node1))
                       (not (= n Node2))
                       (= e Epoch!val!7))))
        (a!7 (not (and (or (= n Node0) (= n Node1)) (not (= n Node2)))))
        (a!8 (and (not (or (= n Node0) (= n Node1))) (not (= n Node2))))
        (a!9 (and (not (or (= n Node0) (= n Node1)))
                  (not (= n Node2))
                  (= e Epoch!val!6)
                  (not (= e Epoch!val!5))
                  (not (= e Epoch!val!7))
                  (not (= e Epoch!val!0))
                  (not (= e Epoch!val!4))
                  (not (= e Epoch!val!2))
                  (not (= e Epoch!val!3)))))
  (let ((a!10 (or (and (= n Node2)
                       (= e Epoch!val!5)
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and a!7
                       (not a!8)
                       (not (= n Node2))
                       (= e Epoch!val!0)
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and (= n Node2)
                       (= e Epoch!val!6)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and a!7
                       (not a!8)
                       (not (= n Node2))
                       (= e Epoch!val!7)
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and a!7
                       (not a!8)
                       (not (= n Node2))
                       (= e Epoch!val!5)
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and a!7
                       (not a!8)
                       (not (= n Node2))
                       (= e Epoch!val!6)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!7))
                       (not (= e Epoch!val!0))
                       (not (= e Epoch!val!4))
                       (not (= e Epoch!val!2))
                       (not (= e Epoch!val!3)))
                  (and a!7
                       (not a!8)
                       (not (= n Node2))
                       (= e Epoch!val!2)
                       (not (= e Epoch!val!3)))
                  (and a!7 (not a!8) (not (= n Node2)) (= e Epoch!val!3))
                  a!9)))
  (let ((a!11 (and a!3
                   a!4
                   (or a!5 (and (= n Node2) (= e Epoch!val!5)) (and a!6 a!10)))))
  (let ((a!12 (and (not a!2) (or (and (= n Node2) (= e Epoch!val!6)) a!11))))
    (or a!1 (not a!12))))))))
  (define-fun __R8 () Bool
    (forall ((n Node) (m Node))
  (let ((a!1 (ite (= n Node2)
                  Epoch!val!7
                  (ite (or (= n Node0) (= n Node1)) Epoch!val!6 Epoch!val!5)))
        (a!2 (ite (= m Node2)
                  Epoch!val!7
                  (ite (or (= m Node0) (= m Node1)) Epoch!val!6 Epoch!val!5))))
    (or (not (= a!1 a!2)) (= m n)))))
  (define-fun R5 () Bool
    true)
  (define-fun R6 () Bool
    true)
  (define-fun __transfer ((x!0 Epoch) (x!1 Node)) Bool
    false)
  (define-fun __held ((x!0 Node)) Bool
    (or (= x!0 Node0) (= x!0 Node1)))
  (define-fun held ((x!0 Node)) Bool
    (= x!0 Node1))
  (define-fun lt ((x!0 Epoch) (x!1 Epoch)) Bool
    (or (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!7)
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!0)
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!5)
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!7)
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!3)
             (= x!1 Epoch!val!0)
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!7)
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!0)
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!7)
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!0)
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!3))
        (and (= x!0 Epoch!val!0)
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (not (= x!1 Epoch!val!6))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!3))
        (and (= x!0 Epoch!val!3)
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!3)) (= x!1 Epoch!val!3))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!3)))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!3)
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!7))
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!7)
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!0)
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!0)
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!3)
             (= x!1 Epoch!val!7)
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))
        (and (= x!0 Epoch!val!7)
             (not (= x!0 Epoch!val!0))
             (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!3))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!7))
             (not (= x!1 Epoch!val!0))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!3)))))
  (define-fun __is_max ((x!0 Node)) Bool
    false)
  (define-fun is_max ((x!0 Node)) Bool
    (= x!0 Node1))
  (define-fun ep ((x!0 Node)) Epoch
    (ite (= x!0 Node2) Epoch!val!7
    (ite (= x!0 Node1) Epoch!val!6
    (ite (= x!0 Node0) Epoch!val!5
      Epoch!val!3))))
  (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
    false)
  (define-fun __lt ((x!0 Epoch) (x!1 Epoch)) Bool
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!7)) false
    (ite (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!7) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!6)) false
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!5)) false
    (ite (and (= x!0 Epoch!val!7) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!7)) false
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!7)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!0) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!3)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!0) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!3)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!3)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!1)) true
    (ite (and (= x!0 Epoch!val!0) (= x!1 Epoch!val!7)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!7)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!7)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!7)) true
      (lt x!0 x!1))))))))))))))))))))))))))))))))))
  (define-fun __ep ((x!0 Node)) Epoch
    (ite (= x!0 Node2) Epoch!val!7
      (ite (or (= x!0 Node0) (= x!0 Node1)) Epoch!val!6 Epoch!val!5)))
  (define-fun __locked ((x!0 Epoch) (x!1 Node)) Bool
    (and (= x!0 Epoch!val!6)
         (not (= x!0 Epoch!val!5))
         (not (= x!0 Epoch!val!7))
         (not (= x!0 Epoch!val!0))
         (not (= x!0 Epoch!val!4))
         (not (= x!0 Epoch!val!2))
         (not (= x!0 Epoch!val!3))
         (= x!1 Node0)))
  (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
    (and (= x!0 Epoch!val!6)
         (not (= x!0 Epoch!val!5))
         (not (= x!0 Epoch!val!7))
         (not (= x!0 Epoch!val!0))
         (not (= x!0 Epoch!val!4))
         (not (= x!0 Epoch!val!2))
         (not (= x!0 Epoch!val!3))
         (= x!1 Node0)))
)
