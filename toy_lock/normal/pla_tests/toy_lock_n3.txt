# A: \exists n . ~epEQe(n)
~epEQe(`n1`) || ~epEQe(`n2`) || ~epEQe(`n3`)
# B: \forall n . ~epLTe(n) -> \exists m . ~epEQe(m)
~epEQe(`n2`) || ~epEQe(`n3`) || ~epLTe(`n1`)
~epEQe(`n1`) || ~epEQe(`n3`) || ~epLTe(`n2`)
~epEQe(`n1`) || ~epEQe(`n2`) || ~epLTe(`n3`)
# C: \forall n . (locked(n) && epLTe(n)) -> (\forall m1 . \forall m2 . (m1 != m2) -> ~epEQe(m1) || ~epLTe(m2))
~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~lockedE(`n3`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`) || ~lockedE(`n3`)
~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~lockedE(`n2`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~lockedE(`n2`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`) || ~lockedE(`n1`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~lockedE(`n1`)
# D: \forall n . (~held(n) && epEQ(n1)) -> \forall m . (m != n) -> ~epLTe(m)
held(`n1`) || ~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
held(`n2`) || ~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`)
held(`n3`) || ~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`)
# E: \forall n . (held(n) && epLTe(n)) -> \exists m1 . \exists m2 . (m1 != m2) && epEQe(m1) && epLTe(m2)
~held(`n2`)  || ~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~held(`n3`)  || ~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~held(`n1`)  || ~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`)
~held(`n1`)  || ~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`)
~held(`n3`)  || ~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`)
~held(`n2`)  || ~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`)
# F: \forall n . transferE(n) -> \exists m1 . \exists m2 . \exists m3. ~epEQe(m1) || ~epLTe(m2) || ~epLTe(m3)
~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n1`)
~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n2`)
~epEQe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n3`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`) || ~transferE(`n1`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`) || ~transferE(`n2`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n3`) || ~transferE(`n3`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~transferE(`n1`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~transferE(`n2`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~transferE(`n3`)
# G: \forall n . epEQe(n) -> \exists m . ~epLTe(m)``
~epEQe(`n1`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~epEQe(`n2`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~epEQe(`n3`) || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
# H: \forall n . held(n) -> \exists m . ~epLTe(m)
~held(`n1`)  || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~held(`n2`)  || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
~held(`n3`)  || ~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`)
# I: \forall n . lockedE(n) -> \exists m . ~epLTe(m)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~lockedE(`n1`)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~lockedE(`n2`)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~lockedE(`n3`)
# J: \forall n1 . \forall n2 . (n1 != n2) && (transferE(n1) && transferE(n2)) -> \exists m . ~epLTe(m)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n1`)  || ~transferE(`n2`)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n1`)  || ~transferE(`n3`)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || ~transferE(`n2`)  || ~transferE(`n3`)
# K: \exists n . transferE(n) -> \exists m . ~epLTe(m)
~epLTe(`n1`) || ~epLTe(`n2`) || ~epLTe(`n3`) || transferE(`n1`) || transferE(`n2`) || transferE(`n3`)``