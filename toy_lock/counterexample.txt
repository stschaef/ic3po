sat
(
  ;; universe for Epoch:
  ;;   Epoch!val!0 Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!6 
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Epoch!val!0 () Epoch)
  (declare-fun Epoch!val!1 () Epoch)
  (declare-fun Epoch!val!2 () Epoch)
  (declare-fun Epoch!val!3 () Epoch)
  (declare-fun Epoch!val!4 () Epoch)
  (declare-fun Epoch!val!5 () Epoch)
  (declare-fun Epoch!val!6 () Epoch)
  ;; cardinality constraint:
  (forall ((x Epoch))
          (or (= x Epoch!val!0)
              (= x Epoch!val!1)
              (= x Epoch!val!2)
              (= x Epoch!val!3)
              (= x Epoch!val!4)
              (= x Epoch!val!5)
              (= x Epoch!val!6)))
  ;; -----------
  (define-fun __R () Bool
    false)
  (define-fun R () Bool
    true)
  (define-fun zero () Epoch
    Epoch!val!3)
  (define-fun T () Bool
    true)
  (define-fun __R1 () Bool
    true)
  (define-fun R2 () Bool
    true)
  (define-fun __R7 () Bool
    (forall ((n Node) (e Epoch))
  (let ((a!1 (not (and (= e Epoch!val!2)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!0))
                       (= n node0))))
        (a!2 (not (and (= n node0)
                       (not (= n node1))
                       (not (= n node2))
                       (= e Epoch!val!4))))
        (a!3 (not (and (not (= n node0)) (not (= n node1)) (not (= n node2)))))
        (a!4 (not (and (= n node1) (not (= n node2)))))
        (a!5 (and (= n node1) (not (= n node2)) (= e Epoch!val!0))))
  (let ((a!6 (or (and (= n node1)
                      (not (= n node2))
                      (not (= e Epoch!val!3))
                      (not (= e Epoch!val!6))
                      (not (= e Epoch!val!1))
                      (not (= e Epoch!val!2))
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0)))
                 (and (= n node2)
                      a!3
                      a!4
                      (= e Epoch!val!1)
                      (not (= e Epoch!val!2))
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0)))
                 a!5
                 (and (= n node2)
                      a!3
                      a!4
                      (not (= e Epoch!val!3))
                      (not (= e Epoch!val!6))
                      (not (= e Epoch!val!1))
                      (not (= e Epoch!val!2))
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0)))
                 (and (= n node2)
                      a!3
                      a!4
                      (= e Epoch!val!5)
                      (not (= e Epoch!val!0)))
                 (and (= n node2) a!3 a!4 (= e Epoch!val!0))
                 (and (not (= n node0))
                      (not (= n node1))
                      (not (= n node2))
                      a!4
                      (= e Epoch!val!0))
                 (and (= n node1)
                      (not (= n node2))
                      (= e Epoch!val!2)
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0)))
                 (and (not (= n node2)) a!3 a!4 (= e Epoch!val!0))
                 (and (= n node2)
                      a!3
                      a!4
                      (= e Epoch!val!2)
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0)))
                 (and (not (= n node2))
                      a!3
                      a!4
                      (= e Epoch!val!2)
                      (not (= e Epoch!val!5))
                      (not (= e Epoch!val!0))))))
    (or (and (= n node0) (not (= n node1)) (not (= n node2)) (= e Epoch!val!2))
        (and (= n node1) (not (= n node2)) (= e Epoch!val!2))
        (and (= n node2) (= e Epoch!val!0))
        a!1
        (and (= n node0) (not (= n node1)) (not (= n node2)) (= e Epoch!val!0))
        (and a!2 a!6)
        (and (not (= n node0))
             (not (= n node1))
             (not (= n node2))
             (= e Epoch!val!0))
        (and (= n node2) (= e Epoch!val!2))
        a!5
        (and (= n node2) (= e Epoch!val!1))
        (and (= n node1) (not (= n node2)) (= e Epoch!val!4))
        (and (= n node2) (= e Epoch!val!4))
        (and (= n node2) (= e Epoch!val!5)))))))
  (define-fun __R6 () Bool
    true)
  (define-fun R3 () Bool
    true)
  (define-fun R1 () Bool
    true)
  (define-fun __R2 () Bool
    true)
  (define-fun I () Bool
    (exists ((first Node) (e Epoch))
  (let ((a!1 (ite (= first node2)
                  Epoch!val!6
                  (ite (= first node1)
                       Epoch!val!5
                       (ite (= first node0) Epoch!val!4 Epoch!val!2))))
        (a!2 (forall ((e1 Epoch))
               (not (and (= e1 Epoch!val!0) (= first node0))))))
    (and (not (= e Epoch!val!3))
         (forall ((n Node)) (= n first))
         (= first node0)
         (= a!1 e)
         a!2))))
  (define-fun P () Bool
    (forall ((n Node) (m Node) (e Epoch))
  (or (not (and (= e Epoch!val!0) (= n node0) (= m node0))) (= n m))))
  (define-fun concrete_R () Bool
    (exists ((e Epoch))
  (and (forall ((n Node))
         (let ((a!1 (not (and (not (= n node0))
                              (not (= n node1))
                              (not (= n node2)))))
               (a!2 (not (and (= n node1) (not (= n node2))))))
         (let ((a!3 (or (and (= e Epoch!val!3)
                             (not (= e Epoch!val!6))
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node2))
                             a!1
                             a!2)
                        (and (= e Epoch!val!5)
                             (not (= e Epoch!val!0))
                             (not (= n node0))
                             (not (= n node1))
                             (not (= n node2))
                             a!2)
                        (and (= e Epoch!val!3)
                             (not (= e Epoch!val!6))
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (= n node2)
                             a!1
                             a!2)
                        (and (= e Epoch!val!6)
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (= n node1)
                             (not (= n node2)))
                        (and (= e Epoch!val!6)
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node2))
                             a!1
                             a!2)
                        (and (= e Epoch!val!6)
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node0))
                             (not (= n node1))
                             (not (= n node2))
                             a!2)
                        (and (= e Epoch!val!5)
                             (not (= e Epoch!val!0))
                             (not (= n node2))
                             a!1
                             a!2)
                        (and (= e Epoch!val!3)
                             (not (= e Epoch!val!6))
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node0))
                             (not (= n node1))
                             (not (= n node2))
                             a!2)
                        (and (= e Epoch!val!1)
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node2))
                             a!1
                             a!2)
                        (and (= e Epoch!val!1)
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node0))
                             (not (= n node1))
                             (not (= n node2))
                             a!2)
                        (and (= e Epoch!val!3)
                             (not (= e Epoch!val!6))
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (= n node1)
                             (not (= n node2)))
                        (and (not (= e Epoch!val!3))
                             (not (= e Epoch!val!6))
                             (not (= e Epoch!val!1))
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (not (= n node0))
                             (not (= n node1))
                             (not (= n node2))
                             a!2)
                        (and (= e Epoch!val!1)
                             (not (= e Epoch!val!2))
                             (not (= e Epoch!val!5))
                             (not (= e Epoch!val!0))
                             (= n node1)
                             (not (= n node2))))))
           (not a!3))))
       (exists ((m Node))
         (let ((a!1 (ite (= m node2)
                         Epoch!val!6
                         (ite (= m node1)
                              Epoch!val!5
                              (ite (= m node0) Epoch!val!4 Epoch!val!2)))))
           (= e a!1))))))
  (define-fun __R3 () Bool
    (forall ((n Node) (m Node) (e Epoch))
  (let ((a!1 (not (and (= e Epoch!val!2)
                       (not (= e Epoch!val!5))
                       (not (= e Epoch!val!0))
                       (= n node0)
                       (= m node0)))))
    (or a!1 (= n m)))))
  (define-fun __concrete_R () Bool
    (forall ((e Epoch))
  (and (not (= e Epoch!val!0)) (= e Epoch!val!2) (not (= e Epoch!val!5)))))
  (define-fun R4 () Bool
    true)
  (define-fun __R4 () Bool
    (forall ((n Node) (e Epoch)) (not (and (= e Epoch!val!0) (= n node0)))))
  (define-fun __R5 () Bool
    (forall ((e Epoch))
  (exists ((n Node))
    (and (= e Epoch!val!2)
         (not (= e Epoch!val!5))
         (not (= e Epoch!val!0))
         (= n node0)))))
  (define-fun R7 () Bool
    true)
  (define-fun R6 () Bool
    true)
  (define-fun R5 () Bool
    true)
  (define-fun __P () Bool
    false)
  (define-fun __transfer ((x!0 Epoch) (x!1 Node)) Bool
    (and (= x!0 Epoch!val!2)
         (not (= x!0 Epoch!val!5))
         (not (= x!0 Epoch!val!0))
         (= x!1 node0)))
  (define-fun held ((x!0 Node)) Bool
    (= x!0 node0))
  (define-fun __held ((x!0 Node)) Bool
    false)
  (define-fun lt ((x!0 Epoch) (x!1 Epoch)) Bool
    (or (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!6))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!6)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!6))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!5)
             (not (= x!0 Epoch!val!0))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!6))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!0)) (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!6)
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!6)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!6)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!5)
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!6)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!6))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!5)
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!6))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))
        (and (= x!0 Epoch!val!6)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!0))
        (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!5))
             (not (= x!0 Epoch!val!0))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!5))
             (not (= x!1 Epoch!val!0)))))
  (define-fun __lt ((x!0 Epoch) (x!1 Epoch)) Bool
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4)) false
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!4)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!4)) true
    (ite (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!4)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!4)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!2)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!0)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!1)) true
    (ite (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!6) (= x!1 Epoch!val!5)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!1)) true
    (ite (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!6)) true
    (ite (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!0)) true
      (lt x!0 x!1))))))))))))))))))))))))
  (define-fun ep ((x!0 Node)) Epoch
    (ite (= x!0 node2) Epoch!val!6
    (ite (= x!0 node1) Epoch!val!5
    (ite (= x!0 node0) Epoch!val!4
      Epoch!val!2))))
  (define-fun __ep ((x!0 Node)) Epoch
    (ite (= x!0 node2) Epoch!val!6
    (ite (= x!0 node1) Epoch!val!5
    (ite (= x!0 node0) Epoch!val!4
      Epoch!val!2))))
  (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
    (and (= x!0 Epoch!val!0) (= x!1 node0)))
  (define-fun __locked ((x!0 Epoch) (x!1 Node)) Bool
    (and (= x!0 Epoch!val!0) (= x!1 node0)))
  (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
    false)
)
