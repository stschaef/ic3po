(declare-sort epoch 0)
(declare-sort node 0)

(define-fun .epoch ((S epoch)) epoch (! S :sort 0))
(define-fun .node ((S node)) node (! S :sort 0))

(declare-fun __held (node) Bool)
(declare-fun __isMaxEp (epoch) Bool)
(declare-fun __locked_maxEp (node) Bool)
(declare-fun __transfer_maxEp (node) Bool)

(declare-fun held (node) Bool)
(declare-fun isMaxEp (epoch) Bool)
(declare-fun locked_maxEp (node) Bool)
(declare-fun transfer_maxEp (node) Bool)

(define-fun .held ((V0 node)) Bool (! (__held V0) :next held))
(define-fun .isMaxEp ((V0 epoch)) Bool (! (__isMaxEp V0) :next isMaxEp))
(define-fun .locked_maxEp ((V0 node)) Bool (! (__locked_maxEp V0) :next locked_maxEp))
(define-fun .transfer_maxEp ((V0 node)) Bool (! (__transfer_maxEp V0) :next transfer_maxEp))

(declare-fun epEQmaxEp (node) Bool)
(declare-fun le (epoch epoch) Bool)
(declare-fun zero () epoch)

(define-fun .epEQmaxEp ((V0 node)) Bool (! (epEQmaxEp V0) :global true))
(define-fun .le ((V0 epoch) (V1 epoch)) Bool (! (le V0 V1) :global true))
(define-fun .zero () epoch (! zero :global true))

(declare-fun __loc:e () epoch)
(declare-fun __loc:first () node)

(define-fun .prop () Bool (! 
 (let (($v true
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((X epoch)) (le X X)) (forall ((X epoch) (Y epoch) (Z epoch)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X epoch) (Y epoch)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X epoch) (Y epoch)) (or (le X Y) (le Y X))) (forall ((X epoch)) (le zero X)))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 epoch)) (= (__isMaxEp V0) (= V0 __loc:e))) (forall ((V0 node)) (= (__held V0) (= V0 __loc:first))) (forall ((V0 node)) (= (epEQmaxEp V0) (= V0 __loc:first))) (forall ((V0 node)) (= (__transfer_maxEp V0) false)) (forall ((V0 node)) (= (__locked_maxEp V0) false)) (not (= __loc:e zero)))
 ))
 (and $v))
 :init true))

(define-fun .action_ext:accept () Bool (! 
 (let (($v (exists ((V__fml:e epoch) (V__fml:n node)) (and (forall ((V0 node)) (= (held V0) (ite (= V0 V__fml:n) true (__held V0)))) (forall ((V0 node)) (= (locked_maxEp V0) (ite (= V0 V__fml:n) true (__locked_maxEp V0)))) (__transfer_maxEp V__fml:n) (__isMaxEp V__fml:e) (epEQmaxEp V__fml:n)))
 ))
 (and $v))
 :action ext:accept))

(define-fun .action_ext:grant () Bool (! 
 (let (($v (exists ((V__fml:e epoch) (V__fml:n1 node) (V__fml:n2 node)) (and (forall ((V0 epoch)) (= (isMaxEp V0) (= V0 V__fml:e))) (forall ((V0 node)) (= (transfer_maxEp V0) (ite (= V0 V__fml:n2) true (__transfer_maxEp V0)))) (forall ((V0 node)) (= (held V0) (ite (= V0 V__fml:n1) false (__held V0)))) (__held V__fml:n1) (forall ((Y epoch)) (=> (__isMaxEp Y) (not (le V__fml:e Y))))))
 ))
 (and $v))
 :action ext:grant))

